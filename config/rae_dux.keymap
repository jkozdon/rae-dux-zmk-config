/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&sk {
    release-after-ms = <750>;
    quick-release;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC>;
};

#define BASE_L  0
#define SYM_L   1
#define NUM_L   2
#define NAV_L   3

#define MEHK(KEY) LS(LC(LA(LG(KEY))))
#define MEH       LS(LC(LA(LMETA)))

/ {
    macros {
        ZMK_MACRO(scope, wait-ms = <30>; tap-ms = <30>; bindings = <&kp COLON &kp COLON>;)
        ZMK_MACRO(lambda, wait-ms = <30>; tap-ms = <30>; bindings = <&kp L &kp A &kp M &kp B &kp D &kp A>;)
    };

    combos {
        compatible = "zmk,combos";

        #define COMBO(NAME, BINDINGS, KEYPOS, TIMEOUT) \
              combo_##NAME { \
                timeout-ms = <TIMEOUT>; \
                bindings = <BINDINGS>; \
                key-positions = <KEYPOS>; \
              };

        /*                KEY POSITIONS

          ╭────────────────────╮ ╭────────────────────╮
          │  0   1   2   3   4 │ │  5   6   7   8   9 │
          │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
          │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
          ╰───────╮ 30  31  32 │ │ 33  34  35 ╭───────╯
                  ╰────────────╯ ╰────────────╯        */

        COMBO(caps_word_left, &caps_word, 13 14, 60)
        COMBO(caps_word_right, &caps_word, 15 16, 60)

        COMBO(grave, &kp GRAVE, 1 2, 60)
        COMBO(colon, &kp COLON, 7 8, 60)
        COMBO(equal, &kp EQUAL, 21 22, 60)
        COMBO(semicolon, &kp SEMI, 27 28, 60)

        COMBO(minus, &kp MINUS, 31 34, 60)
        COMBO(underscore, &kp UNDER, 32 33, 60)
    };

    behaviors {
        td_q_esc: td_q_esc {
                  compatible = "zmk,behavior-tap-dance";
                  label = "TD_Q_ESC";
                  #binding-cells = <0>;
                  tapping-term-ms = <400>;
                  bindings = <&kp Q>, <&kp ESC>;
        };

        td_flsh_L: td_flsh_L {
                   compatible = "zmk,behavior-tap-dance";
                   label = "TD_FSLH_L";
                   #binding-cells = <0>;
                   tapping-term-ms = <400>;
                   bindings = <&kp FSLH>, <&kp LEFT>;
        };

        td_dllr_D: td_dllr_D {
                   compatible = "zmk,behavior-tap-dance";
                   label = "TD_DLLR_D";
                   #binding-cells = <0>;
                   tapping-term-ms = <400>;
                   bindings = <&kp DLLR>, <&kp DOWN>;
        };

        td_prcnt_U: td_prcnt_U {
                   compatible = "zmk,behavior-tap-dance";
                   label = "TD_PRCNT_D";
                   #binding-cells = <0>;
                   tapping-term-ms = <400>;
                   bindings = <&kp PRCNT>, <&kp UP>;
        };

        td_tilde_R: td_tilde_R {
                   compatible = "zmk,behavior-tap-dance";
                   label = "TD_TILDE_R";
                   #binding-cells = <0>;
                   tapping-term-ms = <400>;
                   bindings = <&kp TILDE>, <&kp RIGHT>;
        };

    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
                   &td_q_esc    &kp W         &kp E        &kp R          &kp T      /**/   &kp Y         &kp U               &kp I         &kp O         &kp P
                   &kp A        &kp S         &kp D        &kp F          &kp G      /**/   &kp H         &kp J               &kp K         &kp L         &kp BSPC
                   &kp Z        &kp X         &kp C        &kp V          &kp B      /**/   &kp N         &kp M               &kp COMMA     &kp DOT       &kp RETURN
                 /*&            &*/           &sk RCTRL    &sk LSHFT      &sk LCMD   /**/   &sk MEH       &sl SYM_L           &kp SPC     /*&             &*/
            >;
        };

        sym_layer {
            bindings = <
                   &kp ESC      &kp LPAR      &kp RPAR      &kp ASTRK     &kp EQUAL  /**/   &kp PLUS       &kp AMPS         &kp GRAVE       &kp SQT       &kp CARET
                   &kp TAB      &kp LBRC      &kp RBRC      &kp MINUS     &kp BSLH   /**/   &td_flsh_L     &td_dllr_D       &td_prcnt_U     &td_tilde_R   &kp BSPC
                   &to BASE_L   &kp LBKT      &kp RBKT      &kp COMMA     &kp DOT    /**/   &kp SEMI       &kp EXCL         &kp AT          &kp HASH      &kp RETURN
                 /*&            &*/           &sk RCTRL     &sk LSHFT     &sk LALT   /**/   &to NAV_L      &sl SYM_L        &to NUM_L     /*&             &*/
            >;
        };

        /* Need to update */
         num_layer {
            bindings = <
                   &kp ESC      &kp LPAR      &kp RPAR      &kp ASTRK     &kp EQUAL  /**/   &kp PLUS       &kp N7           &kp N8          &kp N9        &kp CARET
                   &kp TAB      &kp LBRC      &kp RBRC      &kp MINUS     &kp BSLH   /**/   &kp FSLH       &kp N4           &kp N5          &kp N6        &kp BSPC
                   &to BASE_L   &kp LBKT      &kp RBKT      &kp COMMA     &kp DOT    /**/   &kp N0         &kp N1           &kp N2          &kp N3        &kp RETURN
                 /*&            &*/           &sk RCTRL     &sk LSHFT     &sk LCMD    /**/   &to NAV_L      &sl SYM_L        &kp SPC      /*&             &*/
            >;
        };

        /* Need to update */
        nav_layer {
            bindings = <
                   &kp ESC      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3 /**/ &bt BT_SEL 4   &none            &bt BT_NXT    &bt BT_PRV      &bt BT_CLR
                   &sk TAB      &kp C_MUTE    &kp C_VOL_DN  &kp C_VOL_UP  &none      /**/   &kp LEFT       &kp DOWN         &kp UP        &kp RIGHT       &kp BSPC
                   &to BASE_L   &none         &none         &none         &none      /**/   &kp HOME       &kp PG_DN        &kp PG_UP     &kp END         &kp RETURN
                 /*&            &*/           &sk RCTRL     &none         &none      /**/   &to NAV_L      &sl SYM_L        &to NUM_L    /*&             &*/
            >;
        };
    };
};
