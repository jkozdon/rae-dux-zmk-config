/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&sk {
    release-after-ms = <750>;
    quick-release;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC>;
};

#define BASE_L  0
#define SYM_L   1
#define NUM_L   2
#define NAV_L   3

#define MEHK(KEY) LS(LC(LA(LG(KEY))))
#define MEH       LS(LC(LA(LMETA)))

/ {
    macros {
        ZMK_MACRO(scope, wait-ms = <30>; tap-ms = <30>; bindings = <&kp COLON &kp COLON>;)
        ZMK_MACRO(lambda, wait-ms = <30>; tap-ms = <30>; bindings = <&kp L &kp A &kp M &kp B &kp D &kp A>;)
    };

    combos {
        compatible = "zmk,combos";

        #define COMBO(NAME, BINDINGS, KEYPOS, TIMEOUT) \
              combo_##NAME { \
                timeout-ms = <TIMEOUT>; \
                bindings = <BINDINGS>; \
                key-positions = <KEYPOS>; \
              };

        /*                KEY POSITIONS

          ╭────────────────────╮ ╭────────────────────╮
          │  0   1   2   3   4 │ │  5   6   7   8   9 │
          │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
          │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
          ╰───────╮ 30  31  32 │ │ 33  34  35 ╭───────╯
                  ╰────────────╯ ╰────────────╯        */

        COMBO(caps_word_left, &caps_word, 13 14, 60)
        COMBO(caps_word_right, &caps_word, 15 16, 60)

        COMBO(grave, &kp GRAVE, 1 2, 60)
        COMBO(colon, &kp COLON, 7 8, 60)
        COMBO(equal, &kp EQUAL, 21 22, 60)
        COMBO(semicolon, &kp SEMI, 27 28, 60)

        COMBO(minus, &kp MINUS, 31 34, 60)
        COMBO(underscore, &kp UNDER, 32 33, 60)
    };

    behaviors {
        td_q_esc: td_q_esc {
                  compatible = "zmk,behavior-tap-dance";
                  label = "TD_Q_ESC";
                  #binding-cells = <0>;
                  tapping-term-ms = <200>;
                  bindings = <&kp Q>, <&kp ESC>;
        };

        td_blsh_L: td_blsh_L {
                   compatible = "zmk,behavior-tap-dance";
                   label = "TD_BLSH_L";
                   #binding-cells = <0>;
                   tapping-term-ms = <200>;
                   bindings = <&kp BSLH>, <&kp LEFT>;
        };

        td_lbrc_D: td_lbrc_D {
                   compatible = "zmk,behavior-tap-dance";
                   label = "TD_LBRC_D";
                   #binding-cells = <0>;
                   tapping-term-ms = <200>;
                   bindings = <&kp LBRC>, <&kp DOWN>;
        };

        td_rbrc_U: td_rbrc_U {
                   compatible = "zmk,behavior-tap-dance";
                   label = "TD_LBRC_D";
                   #binding-cells = <0>;
                   tapping-term-ms = <200>;
                   bindings = <&kp RBRC>, <&kp UP>;
        };

        td_pipe_R: td_pipe_R {
                   compatible = "zmk,behavior-tap-dance";
                   label = "TD_PIPE_R";
                   #binding-cells = <0>;
                   tapping-term-ms = <200>;
                   bindings = <&kp PIPE>, <&kp RIGHT>;
        };

    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
                   &td_q_esc    &kp W         &kp E        &kp R          &kp T      /**/   &kp Y         &kp U               &kp I         &kp O         &kp P
                   &kp A        &kp S         &kp D        &kp F          &kp G      /**/   &kp H         &kp J               &kp K         &kp L         &kp BSPC
                   &kp Z        &kp X         &kp C        &kp V          &kp B      /**/   &kp N         &kp M               &kp COMMA     &kp DOT       &kp FSLH
                 /*&            &*/           &sk RCTL     &sk LSHFT      &sk MEH    /**/   &sk LCMD      &sl SYM_L           &kp SPC     /*&             &*/
            >;
        };

        sym_layer {
            bindings = <
                   &kp EXCL     &kp AT        &kp HASH      &kp DLLR      &kp PRCNT  /**/   &kp CARET      &kp AMPS         &kp ASTRK       &kp SEMI      &kp COLON
                   &kp TAB      &kp UNDER     &kp GRAVE     &kp MINUS     &kp SQT    /**/   &td_blsh_L     &td_lbrc_D       &td_rbrc_U      &td_pipe_R    &kp BSPC
                   &sk LALT     &none         &kp EQUAL     &kp PLUS      &kp DQT    /**/   &kp LBKT       &kp LPAR         &kp RPAR        &kp RBKT      &kp RETURN
                 /*&            &*/           &trans        &trans        &trans     /**/   &to NAV_L      &to BASE_L       &to NUM_L     /*&             &*/
            >;
        };

        /* Need to update */
         num_layer {
            bindings = <
                   &kp UNDER    &kp N6        &kp N5        &kp N4             &kp PLUS           &kp STAR            &kp F4           &kp F5                   &kp F6        &kp F10
                   &kp DOT      &kp N3        &kp N2        &kp N1             &kp MINUS          &kp LSHFT           &kp F1           &kp F2                   &kp F3        &kp F11
                   &kp COMMA    &kp N9        &kp N8        &kp N7             &kp EQUAL          &kp COLON           &kp F7           &kp F8                   &kp F9        &kp F12
                 /*&            &*/           &trans        &trans             &kp N0             &kp N0              &trans           &trans                 /*&             &*/
            >;
        };

        /* Need to update */
        nav_layer {
            bindings = <
                   &kp MEHK(T)   &trans       &trans        &trans             &none              &none               &none            &trans                   &trans        &kp MEHK(T)
                   &sk LALT     &sk LGUI      &sk LSHFT     &sk LCTRL          &trans             &trans              &kp LEFT         &kp DOWN                 &kp UP        &kp RIGHT
                   &trans       &none         &none         &none              &trans             &trans              &kp HOME         &kp K_PREV               &kp K_NEXT    &kp END
                 /*&            &*/           &trans        &trans             &trans             &trans              &trans           &trans             /*&             &*/
            >;
        };
    };
};
